1.Write a Java program to create an abstract class Animal with an abstract method called sound().
 Create subclasses Lion and Tiger that extend the Animal class and implement the sound() method to make a 
specific sound for each animal.

abstract class Animal {

    public abstract void sound();
  }

    class Lion extends Animal {
     @Override
     public void sound() {
     System.out.println("Lion roars!");
    }
}
    class Tiger extends Animal {
     @Override
     public void sound() {
       System.out.println("Tiger growls!");
    }
}
  public class Main {
    public static void main(String[] args) {
        Animal lion = new Lion();
        lion.sound(); 

        Animal tiger = new Tiger();
        tiger.sound();
    }
}

2.Write a Java program to create an abstract class Shape with abstract methods calculateArea() and calculatePerimeter().
 Create subclasses Circle and Triangle that extend the Shape class and implement the respective methods to calculate the area and perimeter of each shape.

    abstract class Shape {
    abstract double calculateArea();
    abstract double calculatePerimeter();
  }
    class Circle extends Shape {
    private double radius;

    public Circle(double radius) {
        this.radius = radius;
    }

    @Override
    double calculateArea() {
        return Math.PI * radius * radius;
    }

    @Override
    double calculatePerimeter() {
        return 2 * Math.PI * radius;
    }
}

     class Triangle extends Shape {
    private double side1;
    private double side2;
    private double side3;

    public Triangle(double side1, double side2, double side3) {
        this.side1 = side1;
        this.side2 = side2;
        this.side3 = side3;
    }

    @Override
    double calculateArea() {
        double s = (side1 + side2 + side3) / 2; // Semi-perimeter
        return Math.sqrt(s * (s - side1) * (s - side2) * (s - side3));
    }

    @Override
    double calculatePerimeter() {
        return side1 + side2 + side3;
    }
}

     public class Main {
     public static void main(String[] args) {
		double r = 4.0;
        Circle circle = new Circle(r);
		double ts1 = 3.0, ts2 = 4.0, ts3 = 5.0;
        Triangle triangle = new Triangle(ts1, ts2, ts3);
        System.out.println("Radius of the Circle"+r);
        System.out.println("Area of the Circle: " + circle.calculateArea());
        System.out.println("Perimeter of the Circle: " + circle.calculatePerimeter());
        System.out.println("\nSides of the Traiangel are: "+ts1+','+ts2+','+ts3);
        System.out.println("Area of the Triangle: " + triangle.calculateArea());
        System.out.println("Perimeter of the Triangle: " + triangle.calculatePerimeter());
    }
}

3.Write a Java program to create an abstract class Vehicle with abstract methods startEngine() and stopEngine().
 Create subclasses Car and Motorcycle that extend the Vehicle class.implement the respective methods to start and stop the engines for each vehicle type.

  abstract class Vehicle {
  public abstract void startEngine();
  public abstract void stopEngine();
}

  class Car extends Vehicle {
  @Override
  public void startEngine() {
    System.out.println("Car: Starting the engine...");
  }

  @Override
  public void stopEngine() {
    System.out.println("Car: Stopping the engine...");
  }
}
   class Motorcycle extends Vehicle {
  @Override
  public void startEngine() {
    System.out.println("Motorcycle: Starting the engine...");
  }

  @Override
  public void stopEngine() {
    System.out.println("Motorcycle: Stopping the engine...");
  }
}
    public class Main {
    public static void main(String[] args) {
    Vehicle car = new Car();
    Vehicle motorcycle = new Motorcycle();

    car.startEngine();
    car.stopEngine();

    motorcycle.startEngine();
    motorcycle.stopEngine();
  }
}

4.Write a Java program to create an abstract class Person with abstract methods eat() and exercise(). Create subclasses Athlete and LazyPerson that extend the Person class.
implement the respective methods to describe how each person eats and exercises.
  
  abstract class Person {
  public abstract void eat();

  public abstract void exercise();
 }
  class Athlete extends Person {
  @Override
  public void eat() {
    System.out.println("Athlete: Include foods full of calcium, iron, potassium, and fiber.");
  }

  @Override
  public void exercise() {
    System.out.println("Athlete: Training allows the body to gradually build up strength and endurance.");
  }
 }

  class LazyPerson extends Person {
  @Override
  public void eat() {
    System.out.println("Couch Potato: Eating while watching TV also prolongs the time period that we're eating.");
  }

  @Override
  public void exercise() {
    System.out.println("Couch Potato: Rarely exercising or being physically active.");
  }
 }

   public class Main {
   public static void main(String[] args) {
    Person athlete = new Athlete();
    Person lazyPerson = new LazyPerson();
    athlete.eat();
    athlete.exercise();
    lazyPerson.eat();
    lazyPerson.exercise();
  }
 }

5.Write a Java program to create an abstract class Instrument with abstract methods play() and tune(). Create subclasses for Glockenspiel and Violin that extend the Instrument class.
 implement the respective methods to play and tune each instrument.

  abstract class Instrument {
  public abstract void play();

  public abstract void tune();
  }

  class Glockenspiel extends Instrument {
  @Override
  public void play() {
    System.out.println("Glockenspiel: Playing the notes on the metal bars.");
  }

  @Override
  public void tune() {
    System.out.println("Glockenspiel: Tuning the metal bars to the correct pitch.");
  }
 }

  class Violin extends Instrument {
  @Override
  public void play() {
    System.out.println("Violin: Playing the strings with a bow or fingers.");
  }

  @Override
  public void tune() {
    System.out.println("Violin: Tuning the strings to the correct pitch.");
  }
 }

  public class Main {
  public static void main(String[] args) {
    Instrument glockenspiel = new Glockenspiel();
    Instrument violin = new Violin();

    glockenspiel.play();
    glockenspiel.tune();

    violin.play();
    violin.tune();
  }
 }

6.Which of these keywords are used to define an abstract class?
a) abst
b) abstract
c) Abstract
d) abstract class
ans:b

7.Which of these is not a correct statement?
a) Every class containing abstract method must be declared abstract
b) Abstract class defines only the structure of the class not its implementation
c) Abstract class can be initiated by new operator
d) Abstract class can be inherited
ans:c

8.An abstract class in Java usually contains one or more abstract ?
a) constructors
b) methods
c) variables
d) None
ans:b

9.An abstract class with 100% abstract methods is equivalent to ______.
A) Concrete class
B) Virtual Class
C) Interface
D) All the above
ans:c

10. Which of these can an abstract class contain?
a) Only concrete methods
b) Only abstract methods
c) Both abstract and concrete methods
d) none
ans:c
